module.exports=class{constructor(a=!1){this._keyword='_keyword_',this.nonWordBoundaries=(()=>{const a=(a,b,c)=>{const d=[];for(let e=a;e<=b;e++)d.push(c?String.fromCharCode(e):e);return d};return new Set([...a(0,9),...a(65,90,!0),...a(97,122,!0),'_'])})(),this.keywordTrieDict=new Map,this.caseSensitive=a}setNonWordBoundaries(a){this.nonWordBoundaries=new Set(a)}addNonWordBoundaries(a){return!(1!==a.length)&&(this.nonWordBoundaries.add(a),!0)}addKeyword(a,b){if(b||(b=a),a&&b){this.caseSensitive||(a=a.toLowerCase());let c=this.keywordTrieDict;a.split('').forEach((a)=>{c.get(a)||c.set(a,new Map),c=c.get(a)}),c.set(this._keyword,b)}}removeKeyword(a){let b=!1;if(a){this.caseSensitive||(a=a.toLowerCase());let c=this.keywordTrieDict;const d=[];if(a.split('').forEach((a)=>{c.has(a)&&(d.push([a,c]),c=c.get(a))}),c.has(this._keyword)){d.push([this._keyword,c]),d.reverse();for(let[a,b]of d)if(b.delete(a),1!==b.size)break;b=!0}}return b}addKeywordsFromObject(a){for(let[b,c]of Object.entries(a)){if('string'!=typeof b||c.constructor!==Array)throw'Please structure the Object as suggested for using addKeywordsFromObject';c.forEach((a)=>{if('string'!=typeof a)throw'Keywords must be of String type';this.addKeyword(a,b)})}}removeKeywordsFromObject(a){for(let[b,c]of Object.entries(a)){if('string'!=typeof b||c.constructor!==Array)throw'Please structure the Object as suggested for using removeKeywordsFromObject';c.forEach((a)=>{if('string'!=typeof a)throw'Keywords must be of String type';this.removeKeyword(a)})}}addKeywordsFromArray(a){if(a.constructor!==Array)throw'Please structure the Object as suggested for using removeKeywordsFromObject';a.forEach((a)=>{if('string'!=typeof a)throw'Keywords must be of String type';this.addKeyword(a)})}removeKeywordsFromArray(a){if(a.constructor!==Array)throw'Please structure the Object as suggested for using removeKeywordsFromObject';a.forEach((a)=>{if('string'!=typeof a)throw'Keywords must be of String type';this.removeKeyword(a)})}extractKeywords(a){const b=[],c=a.length;if('string'!=typeof a&&0===c)return b;this.caseSensitive||(a=a.toLowerCase());for(let d=this.keywordTrieDict,e=0,f=0;f<c;){let g,h,i,j,k=a[f];if(!this.nonWordBoundaries.has(k)){if(d.has(this._keyword)||d.has(k)){if(g='',h='',i=!1,d.has(this._keyword)&&(g=d.get(this._keyword),h=d.get(this._keyword),e=f),d.has(k)){let b=d.get(k);for(j=f+1;j<c;){let c=a[j];if(!this.nonWordBoundaries.has(c)&&b.has(this._keyword)&&(h=b.get(this._keyword),e=j,i=!0),b.has(c))b=b.get(c);else break;++j}j>=c&&b.has(this._keyword)&&(h=b.get(this._keyword),e=j,i=!0),i&&(f=e)}d=this.keywordTrieDict,h&&b.push(h)}else d=this.keywordTrieDict;}else if(d.has(k))d=d.get(k);else{for(d=this.keywordTrieDict,j=f+1;j<c&&(k=a[j],!!this.nonWordBoundaries.has(k));)++j;f=j}f+1>=c&&d.has(this._keyword)&&(g=d.get(this._keyword),b.push(g)),++f}return b}replaceKeywords(a,b){const c=a.length;if('string'!=typeof a&&0===c)return a;const d=a;this.caseSensitive||(a=a.toLowerCase());let e,f='',g='',h=this.keywordTrieDict,i='',j=0,k=0;for(;k<c;){let l=a[k];g+=d[k];let m,n,o,p;if(!this.nonWordBoundaries.has(l)){if(i=l,h.has(this._keyword)||h.has(l)){if(m='',n='',o=!1,h.has(this._keyword)&&(m=h.get(this._keyword),n=h.get(this._keyword),j=k),h.has(l)){let b=h.get(l),e=g;for(p=k+1;p<c;){let c=a[p];if(e+=d[p],!this.nonWordBoundaries.has(c)&&b.has(this._keyword)&&(i=c,n=b.get(this._keyword),j=p,o=!0),b.has(c))b=b.get(c);else break;++p}p>=c&&b.has(this._keyword)&&(i='',n=b.get(this._keyword),j=p,o=!0),o&&(k=j,g=e)}h=this.keywordTrieDict,n?(b&&(b[n]=e),f+=n+i,g='',i=''):(f+=g,g='',i='')}else h=this.keywordTrieDict,f+=g,g='',i='';}else if(h.has(l))e=g,h=h.get(l);else{for(e=g,h=this.keywordTrieDict,p=k+1;p<c&&(l=a[p],g+=d[p],!!this.nonWordBoundaries.has(l));)++p;k=p,f+=g,g='',i=''}k+1>=c&&(h.has(this._keyword)?(m=h.get(this._keyword),f+=m,b&&(b[m]=e)):f+=g),++k}return f}};